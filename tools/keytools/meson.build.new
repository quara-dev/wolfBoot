# WolfBoot Key Tools - Modern Meson 1.3+ Build

# Get variables from parent scope
build_options = get_variable('build_options', {})
c_args = get_variable('c_args', [])
inc_dirs = get_variable('inc_dirs', [])
wolfboot_dep = get_variable('wolfboot_dep')

# Key generation tool with enhanced features
keygen_sources = ['keygen.c']
if fs.exists('crypto.c')
  keygen_sources += ['crypto.c']
endif

keygen = executable('keygen',
  keygen_sources,
  include_directories : inc_dirs,
  c_args : c_args + ['-DWOLFBOOT_KEYGEN', '-DWOLFSSL_SIGN_TOOL'],
  dependencies : [wolfboot_dep],
  install : false,
  build_by_default : true,
)

# Signing tool with enhanced features
sign_sources = ['sign.c']
if fs.exists('crypto.c')
  sign_sources += ['crypto.c']
endif

sign_tool = executable('sign',
  sign_sources,
  include_directories : inc_dirs,
  c_args : c_args + ['-DWOLFBOOT_SIGN_TOOL', '-DWOLFSSL_SIGN_TOOL'],
  dependencies : [wolfboot_dep],
  install : false,
  build_by_default : true,
)

# Key conversion tool if it exists
if fs.exists('keyconv.c')
  keyconv = executable('keyconv',
    'keyconv.c',
    include_directories : inc_dirs,
    c_args : c_args + ['-DWOLFBOOT_KEYCONV'],
    dependencies : [wolfboot_dep],
    install : false,
  )
endif

# Export tools for parent scope and other subprojects
keytools_programs = [keygen, sign_tool]
set_variable('keytools_programs', keytools_programs)

# For backward compatibility
set_variable('keytools_exe', keytools_programs)

# OTP keystore tools
if build_options.get('flash_otp_keystore', false)
  subdir('otp')
endif

# Test tools if in development mode
if get_option('buildtype') == 'debug'
  if fs.exists('test')
    subdir('test')
  endif
endif

# Custom target for generating keys (requires private key)
if not meson.is_cross_build()
  # Key generation targets
  gen_key = custom_target('generate-key',
    output : ['private_key.der', 'public_key.der'],
    command : [keygen, '--gen-key', '--der', '--out', '@OUTPUT0@', '--pub-out', '@OUTPUT1@'],
    build_by_default : false,
  )
  
  # Keystore generation (depends on key generation)
  gen_keystore = custom_target('generate-keystore',
    input : gen_key,
    output : 'keystore.c',
    command : [keygen, '--keystore', '--der', '@INPUT0@', '--out', '@OUTPUT@'],
    build_by_default : false,
  )
endif

# Tool summary
message('Built keytools: @0@'.format(', '.join([prog.name() for prog in keytools_programs])))
